<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ir_test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ir_test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Thu Sep 22 20:10:06 2022
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; setup_peripherals &rArr; GPIO_Key_Board_Init &rArr; key_board_register &rArr; debug &rArr; sprintf
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">IRQHandler_IR_INT</a> from user_ir_remote.o(.text.IRQHandler_IR_INT) referenced 2 times from user_ir_remote.o(.text.user_ir_device_init)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[2]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[14]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[10]">att_read_callback</a> from profile.o(.text.att_read_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[11]">att_write_callback</a> from profile.o(.text.att_write_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[7]">cb_assertion</a> from main.o(.text.cb_assertion) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[6]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[8]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[b]">cb_putc</a> from main.o(.text.cb_putc) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[d]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[19]">cmbinetest1</a> from key_board_sample.o(.text.cmbinetest1) referenced from key_board_sample.o(.data.keyCombineMap)
 <LI><a href="#[1a]">cmbinetest2</a> from key_board_sample.o(.text.cmbinetest2) referenced from key_board_sample.o(.data.keyCombineMap)
 <LI><a href="#[1b]">cmbinetest3</a> from key_board_sample.o(.text.cmbinetest3) referenced from key_board_sample.o(.data.keyCombineMap)
 <LI><a href="#[1c]">cmbinetest4</a> from key_board_sample.o(.text.cmbinetest4) referenced from key_board_sample.o(.data.keyCombineMap)
 <LI><a href="#[1d]">cmbinetest5</a> from key_board_sample.o(.text.cmbinetest5) referenced from key_board_sample.o(.data.keyCombineMap)
 <LI><a href="#[1e]">get_ir_key</a> from user_ir_remote.o(.text.get_ir_key) referenced from user_ir_remote.o(.data.t_ir)
 <LI><a href="#[f]">gpio_isr</a> from user_ir_remote.o(.text.gpio_isr) referenced 2 times from user_ir_remote.o(.text.ir_soft_rxpin_init)
 <LI><a href="#[20]">ir_transmit_fun</a> from user_ir_remote.o(.text.ir_transmit_fun) referenced from user_ir_remote.o(.data.t_ir)
 <LI><a href="#[1f]">ir_transmit_repeat</a> from user_ir_remote.o(.text.ir_transmit_repeat) referenced from user_ir_remote.o(.data.t_ir)
 <LI><a href="#[4]">kb_check_event_callback</a> from key_board_sample.o(.text.kb_check_event_callback) referenced 2 times from key_board_sample.o(.text.GPIO_Key_Board_Init)
 <LI><a href="#[1]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9]">on_deep_sleep_wakeup</a> from main.o(.text.on_deep_sleep_wakeup) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[18]">pin_level_get</a> from key_board_sample.o(.text.pin_level_get) referenced 16 times from key_board_sample.o(.rodata.key_public_sig)
 <LI><a href="#[17]">pin_level_set</a> from key_board_sample.o(.text.pin_level_set) referenced 4 times from key_board_sample.o(.rodata.key_public_ctrl)
 <LI><a href="#[a]">query_deep_sleep_allowed</a> from main.o(.text.query_deep_sleep_allowed) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[5]">setup_profile</a> from profile.o(.text.setup_profile) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[15]">test16_press_long</a> from key_board_sample.o(.text.test16_press_long) referenced from key_board_sample.o(.rodata.keyFuncMap)
 <LI><a href="#[16]">test16_triple_click_press</a> from key_board_sample.o(.text.test16_triple_click_press) referenced from key_board_sample.o(.rodata.keyFuncMap)
 <LI><a href="#[e]">timer1_isr</a> from main.o(.text.timer1_isr) referenced 2 times from main.o(.text.init_timer1)
 <LI><a href="#[21]">user_ir_device_init</a> from user_ir_remote.o(.text.user_ir_device_init) referenced from user_ir_remote.o(.data.t_ir)
 <LI><a href="#[12]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[c]">watchdog_task</a> from main.o(.text.watchdog_task) referenced 2 times from main.o(.text.app_main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[8c]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[aa]"></a>att_set_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[43]"></a>btstack_push_user_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEC_Decode
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_check_event_callback
</UL>

<P><STRONG><a name="[a7]"></a>gap_set_adv_set_random_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[86]"></a>gap_set_ext_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[88]"></a>gap_set_ext_adv_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[85]"></a>gap_set_ext_adv_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[87]"></a>gap_set_ext_scan_response_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[8b]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[60]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[69]"></a>platform_get_us_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[42]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEC_Decode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test16_triple_click_press
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test16_press_long
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmbinetest5
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmbinetest4
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmbinetest3
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmbinetest2
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmbinetest1
</UL>

<P><STRONG><a name="[5c]"></a>platform_set_evt_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[72]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_soft_rxpin_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[ad]"></a>vTaskDelay</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_task
</UL>

<P><STRONG><a name="[8e]"></a>xQueueCreateMutex</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[64]"></a>xQueueGenericSend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[63]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[5e]"></a>xTaskCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[b5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ba]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_board_register
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_board_init
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[58]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6c]"></a>GIO_ClearAllIntStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peripheral_gpio.o(.text.GIO_ClearAllIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[34]"></a>GIO_ConfigIntSource</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, peripheral_gpio.o(.text.GIO_ConfigIntSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_int_mode
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_soft_rxpin_init
</UL>

<P><STRONG><a name="[6a]"></a>GIO_GetAllIntStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, peripheral_gpio.o(.text.GIO_GetAllIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[6b]"></a>GIO_ReadValue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_ReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_level_get
</UL>

<P><STRONG><a name="[37]"></a>GIO_SetDirection</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_soft_rxpin_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
</UL>

<P><STRONG><a name="[3b]"></a>GIO_WriteValue</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.GIO_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIO_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_level_set
</UL>

<P><STRONG><a name="[38]"></a>GPIO_Key_Board_Init</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, key_board_sample.o(.text.GPIO_Key_Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GPIO_Key_Board_Init &rArr; key_board_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_register
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_board_register
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[96]"></a>IR_CarryConfigSetIrCarryHigh</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CarryConfigSetIrCarryHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CarryConfigSetIrCarryHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[95]"></a>IR_CarryConfigSetIrCarryLow</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CarryConfigSetIrCarryLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CarryConfigSetIrCarryLow
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[76]"></a>IR_CleanIrTxRepeatMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CleanIrTxRepeatMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CleanIrTxRepeatMode
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_transmit_fun
</UL>

<P><STRONG><a name="[a3]"></a>IR_CtrlEnable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[a1]"></a>IR_CtrlIrDatacodeVerify</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlIrDatacodeVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlIrDatacodeVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[9b]"></a>IR_CtrlIrSetBitTime1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CtrlIrSetBitTime1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CtrlIrSetBitTime1
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[9c]"></a>IR_CtrlIrSetBitTime2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CtrlIrSetBitTime2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CtrlIrSetBitTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[9d]"></a>IR_CtrlIrSetIrBitCycle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CtrlIrSetIrBitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CtrlIrSetIrBitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[78]"></a>IR_CtrlIrTxRepeatMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlIrTxRepeatMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlIrTxRepeatMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_transmit_repeat
</UL>

<P><STRONG><a name="[a0]"></a>IR_CtrlIrUsercodeVerify</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlIrUsercodeVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlIrUsercodeVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[9e]"></a>IR_CtrlSetIrEndDetectEn</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlSetIrEndDetectEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlSetIrEndDetectEn
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[91]"></a>IR_CtrlSetIrIntEn</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlSetIrIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlSetIrIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[9f]"></a>IR_CtrlSetIrIntVerifyEn</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_CtrlSetIrIntVerifyEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_CtrlSetIrIntVerifyEn
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[8f]"></a>IR_CtrlSetIrMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CtrlSetIrMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CtrlSetIrMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[90]"></a>IR_CtrlSetTxRxMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_CtrlSetTxRxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_CtrlSetTxRxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[3f]"></a>IR_FsmGetIrTransmitOk</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_FsmGetIrTransmitOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_FsmGetIrTransmitOk
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_IR_INT
</UL>

<P><STRONG><a name="[40]"></a>IR_FsmGetIrTxRepeat</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_FsmGetIrTxRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_FsmGetIrTxRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQHandler_IR_INT
</UL>

<P><STRONG><a name="[97]"></a>IR_TimeSetIrTime1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TimeSetIrTime1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TimeSetIrTime1
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[98]"></a>IR_TimeSetIrTime2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TimeSetIrTime2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TimeSetIrTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[99]"></a>IR_TimeSetIrTime3</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TimeSetIrTime3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TimeSetIrTime3
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[9a]"></a>IR_TimeSetIrTime4</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TimeSetIrTime4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TimeSetIrTime4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[a2]"></a>IR_TimeSetIrTime5</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TimeSetIrTime5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TimeSetIrTime5
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[75]"></a>IR_TxCodeSetIrTxDatacode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TxCodeSetIrTxDatacode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TxCodeSetIrTxDatacode
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_transmit_fun
</UL>

<P><STRONG><a name="[74]"></a>IR_TxCodeSetIrTxUsercode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_ir.o(.text.IR_TxCodeSetIrTxUsercode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_TxCodeSetIrTxUsercode
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_transmit_fun
</UL>

<P><STRONG><a name="[93]"></a>IR_TxConfigCarrierCntClr</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_TxConfigCarrierCntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_TxConfigCarrierCntClr
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[94]"></a>IR_TxConfigIrIntEn</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_TxConfigIrIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_TxConfigIrIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[92]"></a>IR_TxConfigIrTxPol</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_TxConfigIrTxPol))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_TxConfigIrTxPol
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[77]"></a>IR_TxConfigTxStart</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_ir.o(.text.IR_TxConfigTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IR_TxConfigTxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_transmit_repeat
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_transmit_fun
</UL>

<P><STRONG><a name="[3a]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINCTRL_SetPadMux &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_soft_rxpin_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
</UL>

<P><STRONG><a name="[45]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[47]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[49]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[4a]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[4d]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[39]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_soft_rxpin_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[54]"></a>SYSCTRL_GetAdcClkDiv</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetAdcClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYSCTRL_GetAdcClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[50]"></a>SYSCTRL_GetClk</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_GetClk &rArr; SYSCTRL_GetHClk &rArr; get_safe_divider
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetAdcClkDiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetClk
</UL>

<P><STRONG><a name="[53]"></a>SYSCTRL_GetHClk</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetHClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_GetHClk &rArr; get_safe_divider
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPLLClk
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[55]"></a>SYSCTRL_GetPClk</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetPClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_GetPClk &rArr; SYSCTRL_GetHClk &rArr; get_safe_divider
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetClk
</UL>

<P><STRONG><a name="[51]"></a>SYSCTRL_GetPLLClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, peripheral_sysctrl.o(.text.SYSCTRL_GetPLLClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_GetPLLClk
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[56]"></a>SYSCTRL_SelectTimerClk</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SelectTimerClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_SelectTimerClk &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[71]"></a>TMR_Enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, peripheral_timer.o(.text.TMR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[57]"></a>TMR_GetClk</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, peripheral_timer.o(.text.TMR_GetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetHClk &rArr; get_safe_divider
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[8d]"></a>TMR_IntClr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_timer.o(.text.TMR_IntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IntClr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
</UL>

<P><STRONG><a name="[70]"></a>TMR_IntEnable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, peripheral_timer.o(.text.TMR_IntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[6e]"></a>TMR_SetOpMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, peripheral_timer.o(.text.TMR_SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[6f]"></a>TMR_SetReload</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, peripheral_timer.o(.text.TMR_SetReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_SetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
</UL>

<P><STRONG><a name="[89]"></a>TMR_WatchDogEnable3</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, peripheral_timer.o(.text.TMR_WatchDogEnable3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR_WatchDogEnable3
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[ac]"></a>TMR_WatchDogRestart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, peripheral_timer.o(.text.TMR_WatchDogRestart))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_task
</UL>

<P><STRONG><a name="[62]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[5b]"></a>apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[61]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[5a]"></a>apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[3]"></a>app_main</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_main &rArr; setup_peripherals &rArr; GPIO_Key_Board_Init &rArr; key_board_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[d]"></a>cb_trace_rtt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[66]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[3c]"></a>key_board_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, key_board.o(.text.key_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_board_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
</UL>

<P><STRONG><a name="[3d]"></a>key_board_register</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, key_board.o(.text.key_board_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = key_board_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
</UL>

<P><STRONG><a name="[7c]"></a>key_check</STRONG> (Thumb, 982 bytes, Stack size 48 bytes, key_board.o(.text.key_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = key_check &rArr; key_check_combine
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_press_count_stats
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_multi
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_long
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_continuous
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_combine_pre
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_combine
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
</UL>

<P><STRONG><a name="[7a]"></a>key_check_combine_state</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, key_board.o(.text.key_check_combine_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_check_combine_state &rArr; key_event
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_check_event_callback
</UL>

<P><STRONG><a name="[79]"></a>key_check_state</STRONG> (Thumb, 636 bytes, Stack size 56 bytes, key_board.o(.text.key_check_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = key_check_state &rArr; key_event
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_check_event_callback
</UL>

<P><STRONG><a name="[65]"></a>key_combine_register</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, key_board.o(.text.key_combine_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = key_combine_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_register
</UL>

<P><STRONG><a name="[9]"></a>on_deep_sleep_wakeup</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(.text.on_deep_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = on_deep_sleep_wakeup &rArr; setup_peripherals &rArr; GPIO_Key_Board_Init &rArr; key_board_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[a]"></a>query_deep_sleep_allowed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.query_deep_sleep_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = query_deep_sleep_allowed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[5d]"></a>setup_peripherals</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = setup_peripherals &rArr; GPIO_Key_Board_Init &rArr; key_board_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogEnable3
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_deep_sleep_wakeup
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[5]"></a>setup_profile</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_profile
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[5f]"></a>trace_rtt_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[ae]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c6]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c8]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[68]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ca]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[cb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[6]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[8]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[6d]"></a>init_timer1</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, main.o(.text.init_timer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = init_timer1 &rArr; TMR_GetClk &rArr; SYSCTRL_GetClk &rArr; SYSCTRL_GetHClk &rArr; get_safe_divider
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetReload
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetOpMode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IntEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetClk
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectTimerClk
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[e]"></a>timer1_isr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.timer1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = timer1_isr &rArr; key_check &rArr; key_check_combine
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_IntClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.init_timer1)
</UL>
<P><STRONG><a name="[c]"></a>watchdog_task</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.watchdog_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_task
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[10]"></a>att_read_callback</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, profile.o(.text.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_read_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[11]"></a>att_write_callback</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, profile.o(.text.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_write_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[a6]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[a8]"></a>hci_event_command_complete_get_command_opcode</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, profile.o(.text.hci_event_command_complete_get_command_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_command_complete_get_command_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[a9]"></a>hci_event_le_meta_get_subevent_code</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_le_meta_get_subevent_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_le_meta_get_subevent_code
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[a5]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[ab]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[84]"></a>setup_adv</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, profile.o(.text.setup_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setup_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[a4]"></a>user_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = user_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[12]"></a>user_packet_handler</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = user_packet_handler &rArr; setup_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_le_meta_get_subevent_code
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[13]"></a>IRQHandler_IR_INT</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, user_ir_remote.o(.text.IRQHandler_IR_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQHandler_IR_INT &rArr; IR_FsmGetIrTxRepeat
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_FsmGetIrTxRepeat
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_FsmGetIrTransmitOk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_ir_remote.o(.text.user_ir_device_init)
</UL>
<P><STRONG><a name="[41]"></a>NEC_Decode</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, user_ir_remote.o(.text.NEC_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NEC_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[1e]"></a>get_ir_key</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_ir_remote.o(.text.get_ir_key))
<BR>[Address Reference Count : 1]<UL><LI> user_ir_remote.o(.data.t_ir)
</UL>
<P><STRONG><a name="[f]"></a>gpio_isr</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, user_ir_remote.o(.text.gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_isr &rArr; NEC_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_us_time
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ReadValue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_GetAllIntStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ClearAllIntStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEC_Decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_ir_remote.o(.text.ir_soft_rxpin_init)
</UL>
<P><STRONG><a name="[73]"></a>ir_soft_rxpin_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, user_ir_remote.o(.text.ir_soft_rxpin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ir_soft_rxpin_init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_ir_device_init
</UL>

<P><STRONG><a name="[20]"></a>ir_transmit_fun</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, user_ir_remote.o(.text.ir_transmit_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ir_transmit_fun &rArr; IR_TxCodeSetIrTxUsercode
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxConfigTxStart
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxCodeSetIrTxUsercode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxCodeSetIrTxDatacode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CleanIrTxRepeatMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_ir_remote.o(.data.t_ir)
</UL>
<P><STRONG><a name="[1f]"></a>ir_transmit_repeat</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, user_ir_remote.o(.text.ir_transmit_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ir_transmit_repeat &rArr; IR_TxConfigTxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxConfigTxStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlIrTxRepeatMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_ir_remote.o(.data.t_ir)
</UL>
<P><STRONG><a name="[21]"></a>user_ir_device_init</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, user_ir_remote.o(.text.user_ir_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = user_ir_device_init &rArr; ir_soft_rxpin_init &rArr; SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxConfigIrTxPol
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxConfigIrIntEn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TxConfigCarrierCntClr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TimeSetIrTime5
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TimeSetIrTime4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TimeSetIrTime3
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TimeSetIrTime2
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TimeSetIrTime1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlSetTxRxMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlSetIrMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlSetIrIntVerifyEn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlSetIrIntEn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlSetIrEndDetectEn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlIrUsercodeVerify
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlIrSetIrBitCycle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlIrSetBitTime2
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlIrSetBitTime1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlIrDatacodeVerify
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CtrlEnable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CarryConfigSetIrCarryLow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_CarryConfigSetIrCarryHigh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_soft_rxpin_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_ir_remote.o(.data.t_ir)
</UL>
<P><STRONG><a name="[44]"></a>set_reg_bits</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[4e]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[52]"></a>get_safe_divider</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.get_safe_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_safe_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetPClk
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClk
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClk
</UL>

<P><STRONG><a name="[4f]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SelectTimerClk
</UL>

<P><STRONG><a name="[36]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[35]"></a>map_int_mode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.map_int_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map_int_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[48]"></a>_DoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[46]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
</UL>

<P><STRONG><a name="[4c]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[4b]"></a>_WriteNoCheck</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[67]"></a>debug</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, key_board.o(.text.debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combine_register
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_board_register
</UL>

<P><STRONG><a name="[82]"></a>key_check_combine</STRONG> (Thumb, 218 bytes, Stack size 12 bytes, key_board.o(.text.key_check_combine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = key_check_combine
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
</UL>

<P><STRONG><a name="[7d]"></a>key_check_combine_pre</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, key_board.o(.text.key_check_combine_pre))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_check_combine_pre
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
</UL>

<P><STRONG><a name="[81]"></a>key_check_continuous</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, key_board.o(.text.key_check_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_check_continuous
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
</UL>

<P><STRONG><a name="[7f]"></a>key_check_long</STRONG> (Thumb, 258 bytes, Stack size 4 bytes, key_board.o(.text.key_check_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_check_long
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
</UL>

<P><STRONG><a name="[80]"></a>key_check_multi</STRONG> (Thumb, 290 bytes, Stack size 4 bytes, key_board.o(.text.key_check_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_check_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
</UL>

<P><STRONG><a name="[83]"></a>key_event</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, key_board.o(.text.key_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_event
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_state
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_combine_state
</UL>

<P><STRONG><a name="[7e]"></a>key_press_count_stats</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, key_board.o(.text.key_press_count_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_press_count_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check
</UL>

<P><STRONG><a name="[19]"></a>cmbinetest1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.cmbinetest1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmbinetest1
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.data.keyCombineMap)
</UL>
<P><STRONG><a name="[1a]"></a>cmbinetest2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.cmbinetest2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmbinetest2
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.data.keyCombineMap)
</UL>
<P><STRONG><a name="[1b]"></a>cmbinetest3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.cmbinetest3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmbinetest3
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.data.keyCombineMap)
</UL>
<P><STRONG><a name="[1c]"></a>cmbinetest4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.cmbinetest4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmbinetest4
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.data.keyCombineMap)
</UL>
<P><STRONG><a name="[1d]"></a>cmbinetest5</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.cmbinetest5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmbinetest5
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.data.keyCombineMap)
</UL>
<P><STRONG><a name="[3e]"></a>combine_register</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, key_board_sample.o(.text.combine_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = combine_register &rArr; key_combine_register &rArr; debug &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_combine_register
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_Board_Init
</UL>

<P><STRONG><a name="[4]"></a>kb_check_event_callback</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, key_board_sample.o(.text.kb_check_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = kb_check_event_callback &rArr; key_check_state &rArr; key_event
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_push_user_msg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_state
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_combine_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.text.GPIO_Key_Board_Init)
</UL>
<P><STRONG><a name="[18]"></a>pin_level_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, key_board_sample.o(.text.pin_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_level_get &rArr; GIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ReadValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.rodata.key_public_sig)
</UL>
<P><STRONG><a name="[17]"></a>pin_level_set</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, key_board_sample.o(.text.pin_level_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pin_level_set &rArr; GIO_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_WriteValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.rodata.key_public_ctrl)
</UL>
<P><STRONG><a name="[15]"></a>test16_press_long</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.test16_press_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test16_press_long
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.rodata.keyFuncMap)
</UL>
<P><STRONG><a name="[16]"></a>test16_triple_click_press</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_board_sample.o(.text.test16_triple_click_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test16_triple_click_press
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_board_sample.o(.rodata.keyFuncMap)
</UL>
<P><STRONG><a name="[b0]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[b3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
